// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package BridgeBank

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"

	"github.com/harmony-one/harmony/accounts/abi"
	"github.com/harmony-one/harmony/accounts/abi/bind"
	"github.com/harmony-one/harmony/core/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeBankABI is the input ABI used to generate the binding from.
const BridgeBankABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_harmonySender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ethereumReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ethereumToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_harmonyTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethereumTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"HmyLogLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"HmyLogUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newEthereumBridge\",\"type\":\"address\"}],\"name\":\"HmyUpdateEthereumBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"HmyUpdateFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"HmyUpdateOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"HmyWithdrawERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"HmyWithdrawONE\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"BRIDGEBANK_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONEAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAFE_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"}],\"name\":\"activateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_harmonyTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ethereumToken\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bandOracleInterface\",\"outputs\":[{\"internalType\":\"contractBandOracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeRegistry\",\"outputs\":[{\"internalType\":\"contractBridgeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"checkUnlockable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"}],\"name\":\"deactivateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethereumBridge\",\"outputs\":[{\"internalType\":\"contractEthereumBridge\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"}],\"name\":\"getLockedFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"}],\"name\":\"getTokenMappedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"}],\"name\":\"getTotalERC20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalONEBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bandOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethereumONE\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"}],\"name\":\"isActiveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contractOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereumReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountONE\",\"type\":\"uint256\"}],\"name\":\"swapONEForETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereumReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountONE\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"}],\"name\":\"swapONEForToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereumReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountONE\",\"type\":\"uint256\"}],\"name\":\"swapONEForWrappedONE\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereumReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_harmonyTokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokenForETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereumReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_harmonyTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"}],\"name\":\"swapTokenForToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereumReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_harmonyTokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokenForWONE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereumReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_harmonyTokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapToken_1_1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedFund\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ethereumMappedToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_harmonyReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_harmonyTokenAmount\",\"type\":\"uint256\"}],\"name\":\"unlockERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_harmonyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountONE\",\"type\":\"uint256\"}],\"name\":\"unlockONE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethereumBridge\",\"type\":\"address\"}],\"name\":\"updateHmyBridge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harmonyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_harmonyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_harmonyTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_harmonyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountONE\",\"type\":\"uint256\"}],\"name\":\"withdrawONE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBankBin is the compiled bytecode used for deploying new contracts.
var BridgeBankBin = ""

// DeployBridgeBank deploys a new Ethereum contract, binding an instance of BridgeBank to it.
func DeployBridgeBank(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeBank, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeBankABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBankBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeBank{BridgeBankCaller: BridgeBankCaller{contract: contract}, BridgeBankTransactor: BridgeBankTransactor{contract: contract}, BridgeBankFilterer: BridgeBankFilterer{contract: contract}}, nil
}

// BridgeBank is an auto generated Go binding around an Ethereum contract.
type BridgeBank struct {
	BridgeBankCaller     // Read-only binding to the contract
	BridgeBankTransactor // Write-only binding to the contract
	BridgeBankFilterer   // Log filterer for contract events
}

// BridgeBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeBankSession struct {
	Contract     *BridgeBank       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeBankCallerSession struct {
	Contract *BridgeBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// BridgeBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeBankTransactorSession struct {
	Contract     *BridgeBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BridgeBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeBankRaw struct {
	Contract *BridgeBank // Generic contract binding to access the raw methods on
}

// BridgeBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeBankCallerRaw struct {
	Contract *BridgeBankCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeBankTransactorRaw struct {
	Contract *BridgeBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeBank creates a new instance of BridgeBank, bound to a specific deployed contract.
func NewBridgeBank(address common.Address, backend bind.ContractBackend) (*BridgeBank, error) {
	contract, err := bindBridgeBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeBank{BridgeBankCaller: BridgeBankCaller{contract: contract}, BridgeBankTransactor: BridgeBankTransactor{contract: contract}, BridgeBankFilterer: BridgeBankFilterer{contract: contract}}, nil
}

// NewBridgeBankCaller creates a new read-only instance of BridgeBank, bound to a specific deployed contract.
func NewBridgeBankCaller(address common.Address, caller bind.ContractCaller) (*BridgeBankCaller, error) {
	contract, err := bindBridgeBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeBankCaller{contract: contract}, nil
}

// NewBridgeBankTransactor creates a new write-only instance of BridgeBank, bound to a specific deployed contract.
func NewBridgeBankTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeBankTransactor, error) {
	contract, err := bindBridgeBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeBankTransactor{contract: contract}, nil
}

// NewBridgeBankFilterer creates a new log filterer instance of BridgeBank, bound to a specific deployed contract.
func NewBridgeBankFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeBankFilterer, error) {
	contract, err := bindBridgeBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeBankFilterer{contract: contract}, nil
}

// bindBridgeBank binds a generic wrapper to an already deployed contract.
func bindBridgeBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeBank *BridgeBankRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BridgeBank.Contract.BridgeBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeBank *BridgeBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeBank.Contract.BridgeBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeBank *BridgeBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeBank.Contract.BridgeBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeBank *BridgeBankCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BridgeBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeBank *BridgeBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeBank *BridgeBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeBank.Contract.contract.Transact(opts, method, params...)
}

// BRIDGEBANKREVISION is a free data retrieval call binding the contract method 0xf126be26.
//
// Solidity: function BRIDGEBANK_REVISION() view returns(uint256)
func (_BridgeBank *BridgeBankCaller) BRIDGEBANKREVISION(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "BRIDGEBANK_REVISION")
	return *ret0, err
}

// BRIDGEBANKREVISION is a free data retrieval call binding the contract method 0xf126be26.
//
// Solidity: function BRIDGEBANK_REVISION() view returns(uint256)
func (_BridgeBank *BridgeBankSession) BRIDGEBANKREVISION() (*big.Int, error) {
	return _BridgeBank.Contract.BRIDGEBANKREVISION(&_BridgeBank.CallOpts)
}

// BRIDGEBANKREVISION is a free data retrieval call binding the contract method 0xf126be26.
//
// Solidity: function BRIDGEBANK_REVISION() view returns(uint256)
func (_BridgeBank *BridgeBankCallerSession) BRIDGEBANKREVISION() (*big.Int, error) {
	return _BridgeBank.Contract.BRIDGEBANKREVISION(&_BridgeBank.CallOpts)
}

// ETHAddress is a free data retrieval call binding the contract method 0xda228a9b.
//
// Solidity: function ETHAddress() view returns(address)
func (_BridgeBank *BridgeBankCaller) ETHAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "ETHAddress")
	return *ret0, err
}

// ETHAddress is a free data retrieval call binding the contract method 0xda228a9b.
//
// Solidity: function ETHAddress() view returns(address)
func (_BridgeBank *BridgeBankSession) ETHAddress() (common.Address, error) {
	return _BridgeBank.Contract.ETHAddress(&_BridgeBank.CallOpts)
}

// ETHAddress is a free data retrieval call binding the contract method 0xda228a9b.
//
// Solidity: function ETHAddress() view returns(address)
func (_BridgeBank *BridgeBankCallerSession) ETHAddress() (common.Address, error) {
	return _BridgeBank.Contract.ETHAddress(&_BridgeBank.CallOpts)
}

// ONEAddress is a free data retrieval call binding the contract method 0x9d05974b.
//
// Solidity: function ONEAddress() view returns(address)
func (_BridgeBank *BridgeBankCaller) ONEAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "ONEAddress")
	return *ret0, err
}

// ONEAddress is a free data retrieval call binding the contract method 0x9d05974b.
//
// Solidity: function ONEAddress() view returns(address)
func (_BridgeBank *BridgeBankSession) ONEAddress() (common.Address, error) {
	return _BridgeBank.Contract.ONEAddress(&_BridgeBank.CallOpts)
}

// ONEAddress is a free data retrieval call binding the contract method 0x9d05974b.
//
// Solidity: function ONEAddress() view returns(address)
func (_BridgeBank *BridgeBankCallerSession) ONEAddress() (common.Address, error) {
	return _BridgeBank.Contract.ONEAddress(&_BridgeBank.CallOpts)
}

// SAFENUMBER is a free data retrieval call binding the contract method 0x204897ff.
//
// Solidity: function SAFE_NUMBER() view returns(uint256)
func (_BridgeBank *BridgeBankCaller) SAFENUMBER(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "SAFE_NUMBER")
	return *ret0, err
}

// SAFENUMBER is a free data retrieval call binding the contract method 0x204897ff.
//
// Solidity: function SAFE_NUMBER() view returns(uint256)
func (_BridgeBank *BridgeBankSession) SAFENUMBER() (*big.Int, error) {
	return _BridgeBank.Contract.SAFENUMBER(&_BridgeBank.CallOpts)
}

// SAFENUMBER is a free data retrieval call binding the contract method 0x204897ff.
//
// Solidity: function SAFE_NUMBER() view returns(uint256)
func (_BridgeBank *BridgeBankCallerSession) SAFENUMBER() (*big.Int, error) {
	return _BridgeBank.Contract.SAFENUMBER(&_BridgeBank.CallOpts)
}

// BandOracleInterface is a free data retrieval call binding the contract method 0xa1c1d3e2.
//
// Solidity: function bandOracleInterface() view returns(address)
func (_BridgeBank *BridgeBankCaller) BandOracleInterface(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "bandOracleInterface")
	return *ret0, err
}

// BandOracleInterface is a free data retrieval call binding the contract method 0xa1c1d3e2.
//
// Solidity: function bandOracleInterface() view returns(address)
func (_BridgeBank *BridgeBankSession) BandOracleInterface() (common.Address, error) {
	return _BridgeBank.Contract.BandOracleInterface(&_BridgeBank.CallOpts)
}

// BandOracleInterface is a free data retrieval call binding the contract method 0xa1c1d3e2.
//
// Solidity: function bandOracleInterface() view returns(address)
func (_BridgeBank *BridgeBankCallerSession) BandOracleInterface() (common.Address, error) {
	return _BridgeBank.Contract.BandOracleInterface(&_BridgeBank.CallOpts)
}

// BridgeRegistry is a free data retrieval call binding the contract method 0x316be171.
//
// Solidity: function bridgeRegistry() view returns(address)
func (_BridgeBank *BridgeBankCaller) BridgeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "bridgeRegistry")
	return *ret0, err
}

// BridgeRegistry is a free data retrieval call binding the contract method 0x316be171.
//
// Solidity: function bridgeRegistry() view returns(address)
func (_BridgeBank *BridgeBankSession) BridgeRegistry() (common.Address, error) {
	return _BridgeBank.Contract.BridgeRegistry(&_BridgeBank.CallOpts)
}

// BridgeRegistry is a free data retrieval call binding the contract method 0x316be171.
//
// Solidity: function bridgeRegistry() view returns(address)
func (_BridgeBank *BridgeBankCallerSession) BridgeRegistry() (common.Address, error) {
	return _BridgeBank.Contract.BridgeRegistry(&_BridgeBank.CallOpts)
}

// CheckUnlockable is a free data retrieval call binding the contract method 0xb4bfd9a7.
//
// Solidity: function checkUnlockable(address _token, uint256 _amount) view returns(bool)
func (_BridgeBank *BridgeBankCaller) CheckUnlockable(opts *bind.CallOpts, _token common.Address, _amount *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "checkUnlockable", _token, _amount)
	return *ret0, err
}

// CheckUnlockable is a free data retrieval call binding the contract method 0xb4bfd9a7.
//
// Solidity: function checkUnlockable(address _token, uint256 _amount) view returns(bool)
func (_BridgeBank *BridgeBankSession) CheckUnlockable(_token common.Address, _amount *big.Int) (bool, error) {
	return _BridgeBank.Contract.CheckUnlockable(&_BridgeBank.CallOpts, _token, _amount)
}

// CheckUnlockable is a free data retrieval call binding the contract method 0xb4bfd9a7.
//
// Solidity: function checkUnlockable(address _token, uint256 _amount) view returns(bool)
func (_BridgeBank *BridgeBankCallerSession) CheckUnlockable(_token common.Address, _amount *big.Int) (bool, error) {
	return _BridgeBank.Contract.CheckUnlockable(&_BridgeBank.CallOpts, _token, _amount)
}

// EthereumBridge is a free data retrieval call binding the contract method 0x1cf86a63.
//
// Solidity: function ethereumBridge() view returns(address)
func (_BridgeBank *BridgeBankCaller) EthereumBridge(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "ethereumBridge")
	return *ret0, err
}

// EthereumBridge is a free data retrieval call binding the contract method 0x1cf86a63.
//
// Solidity: function ethereumBridge() view returns(address)
func (_BridgeBank *BridgeBankSession) EthereumBridge() (common.Address, error) {
	return _BridgeBank.Contract.EthereumBridge(&_BridgeBank.CallOpts)
}

// EthereumBridge is a free data retrieval call binding the contract method 0x1cf86a63.
//
// Solidity: function ethereumBridge() view returns(address)
func (_BridgeBank *BridgeBankCallerSession) EthereumBridge() (common.Address, error) {
	return _BridgeBank.Contract.EthereumBridge(&_BridgeBank.CallOpts)
}

// FeeDenominator is a free data retrieval call binding the contract method 0x180b0d7e.
//
// Solidity: function feeDenominator() view returns(uint256)
func (_BridgeBank *BridgeBankCaller) FeeDenominator(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "feeDenominator")
	return *ret0, err
}

// FeeDenominator is a free data retrieval call binding the contract method 0x180b0d7e.
//
// Solidity: function feeDenominator() view returns(uint256)
func (_BridgeBank *BridgeBankSession) FeeDenominator() (*big.Int, error) {
	return _BridgeBank.Contract.FeeDenominator(&_BridgeBank.CallOpts)
}

// FeeDenominator is a free data retrieval call binding the contract method 0x180b0d7e.
//
// Solidity: function feeDenominator() view returns(uint256)
func (_BridgeBank *BridgeBankCallerSession) FeeDenominator() (*big.Int, error) {
	return _BridgeBank.Contract.FeeDenominator(&_BridgeBank.CallOpts)
}

// FeeNumerator is a free data retrieval call binding the contract method 0xe86dea4a.
//
// Solidity: function feeNumerator() view returns(uint256)
func (_BridgeBank *BridgeBankCaller) FeeNumerator(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "feeNumerator")
	return *ret0, err
}

// FeeNumerator is a free data retrieval call binding the contract method 0xe86dea4a.
//
// Solidity: function feeNumerator() view returns(uint256)
func (_BridgeBank *BridgeBankSession) FeeNumerator() (*big.Int, error) {
	return _BridgeBank.Contract.FeeNumerator(&_BridgeBank.CallOpts)
}

// FeeNumerator is a free data retrieval call binding the contract method 0xe86dea4a.
//
// Solidity: function feeNumerator() view returns(uint256)
func (_BridgeBank *BridgeBankCallerSession) FeeNumerator() (*big.Int, error) {
	return _BridgeBank.Contract.FeeNumerator(&_BridgeBank.CallOpts)
}

// GetLockedFund is a free data retrieval call binding the contract method 0xfd930c7d.
//
// Solidity: function getLockedFund(address _harmonyToken) view returns(uint256)
func (_BridgeBank *BridgeBankCaller) GetLockedFund(opts *bind.CallOpts, _harmonyToken common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "getLockedFund", _harmonyToken)
	return *ret0, err
}

// GetLockedFund is a free data retrieval call binding the contract method 0xfd930c7d.
//
// Solidity: function getLockedFund(address _harmonyToken) view returns(uint256)
func (_BridgeBank *BridgeBankSession) GetLockedFund(_harmonyToken common.Address) (*big.Int, error) {
	return _BridgeBank.Contract.GetLockedFund(&_BridgeBank.CallOpts, _harmonyToken)
}

// GetLockedFund is a free data retrieval call binding the contract method 0xfd930c7d.
//
// Solidity: function getLockedFund(address _harmonyToken) view returns(uint256)
func (_BridgeBank *BridgeBankCallerSession) GetLockedFund(_harmonyToken common.Address) (*big.Int, error) {
	return _BridgeBank.Contract.GetLockedFund(&_BridgeBank.CallOpts, _harmonyToken)
}

// GetTokenMappedAddress is a free data retrieval call binding the contract method 0x722b1d23.
//
// Solidity: function getTokenMappedAddress(address _harmonyToken) view returns(address)
func (_BridgeBank *BridgeBankCaller) GetTokenMappedAddress(opts *bind.CallOpts, _harmonyToken common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "getTokenMappedAddress", _harmonyToken)
	return *ret0, err
}

// GetTokenMappedAddress is a free data retrieval call binding the contract method 0x722b1d23.
//
// Solidity: function getTokenMappedAddress(address _harmonyToken) view returns(address)
func (_BridgeBank *BridgeBankSession) GetTokenMappedAddress(_harmonyToken common.Address) (common.Address, error) {
	return _BridgeBank.Contract.GetTokenMappedAddress(&_BridgeBank.CallOpts, _harmonyToken)
}

// GetTokenMappedAddress is a free data retrieval call binding the contract method 0x722b1d23.
//
// Solidity: function getTokenMappedAddress(address _harmonyToken) view returns(address)
func (_BridgeBank *BridgeBankCallerSession) GetTokenMappedAddress(_harmonyToken common.Address) (common.Address, error) {
	return _BridgeBank.Contract.GetTokenMappedAddress(&_BridgeBank.CallOpts, _harmonyToken)
}

// GetTotalERC20Balance is a free data retrieval call binding the contract method 0xac4a875c.
//
// Solidity: function getTotalERC20Balance(address _harmonyToken) view returns(uint256)
func (_BridgeBank *BridgeBankCaller) GetTotalERC20Balance(opts *bind.CallOpts, _harmonyToken common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "getTotalERC20Balance", _harmonyToken)
	return *ret0, err
}

// GetTotalERC20Balance is a free data retrieval call binding the contract method 0xac4a875c.
//
// Solidity: function getTotalERC20Balance(address _harmonyToken) view returns(uint256)
func (_BridgeBank *BridgeBankSession) GetTotalERC20Balance(_harmonyToken common.Address) (*big.Int, error) {
	return _BridgeBank.Contract.GetTotalERC20Balance(&_BridgeBank.CallOpts, _harmonyToken)
}

// GetTotalERC20Balance is a free data retrieval call binding the contract method 0xac4a875c.
//
// Solidity: function getTotalERC20Balance(address _harmonyToken) view returns(uint256)
func (_BridgeBank *BridgeBankCallerSession) GetTotalERC20Balance(_harmonyToken common.Address) (*big.Int, error) {
	return _BridgeBank.Contract.GetTotalERC20Balance(&_BridgeBank.CallOpts, _harmonyToken)
}

// GetTotalONEBalance is a free data retrieval call binding the contract method 0x0a71a74b.
//
// Solidity: function getTotalONEBalance() view returns(uint256)
func (_BridgeBank *BridgeBankCaller) GetTotalONEBalance(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "getTotalONEBalance")
	return *ret0, err
}

// GetTotalONEBalance is a free data retrieval call binding the contract method 0x0a71a74b.
//
// Solidity: function getTotalONEBalance() view returns(uint256)
func (_BridgeBank *BridgeBankSession) GetTotalONEBalance() (*big.Int, error) {
	return _BridgeBank.Contract.GetTotalONEBalance(&_BridgeBank.CallOpts)
}

// GetTotalONEBalance is a free data retrieval call binding the contract method 0x0a71a74b.
//
// Solidity: function getTotalONEBalance() view returns(uint256)
func (_BridgeBank *BridgeBankCallerSession) GetTotalONEBalance() (*big.Int, error) {
	return _BridgeBank.Contract.GetTotalONEBalance(&_BridgeBank.CallOpts)
}

// IsActiveToken is a free data retrieval call binding the contract method 0x575c51c2.
//
// Solidity: function isActiveToken(address _harmonyToken) view returns(bool)
func (_BridgeBank *BridgeBankCaller) IsActiveToken(opts *bind.CallOpts, _harmonyToken common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "isActiveToken", _harmonyToken)
	return *ret0, err
}

// IsActiveToken is a free data retrieval call binding the contract method 0x575c51c2.
//
// Solidity: function isActiveToken(address _harmonyToken) view returns(bool)
func (_BridgeBank *BridgeBankSession) IsActiveToken(_harmonyToken common.Address) (bool, error) {
	return _BridgeBank.Contract.IsActiveToken(&_BridgeBank.CallOpts, _harmonyToken)
}

// IsActiveToken is a free data retrieval call binding the contract method 0x575c51c2.
//
// Solidity: function isActiveToken(address _harmonyToken) view returns(bool)
func (_BridgeBank *BridgeBankCallerSession) IsActiveToken(_harmonyToken common.Address) (bool, error) {
	return _BridgeBank.Contract.IsActiveToken(&_BridgeBank.CallOpts, _harmonyToken)
}

// LockNonce is a free data retrieval call binding the contract method 0xb5a9096e.
//
// Solidity: function lockNonce() view returns(uint256)
func (_BridgeBank *BridgeBankCaller) LockNonce(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "lockNonce")
	return *ret0, err
}

// LockNonce is a free data retrieval call binding the contract method 0xb5a9096e.
//
// Solidity: function lockNonce() view returns(uint256)
func (_BridgeBank *BridgeBankSession) LockNonce() (*big.Int, error) {
	return _BridgeBank.Contract.LockNonce(&_BridgeBank.CallOpts)
}

// LockNonce is a free data retrieval call binding the contract method 0xb5a9096e.
//
// Solidity: function lockNonce() view returns(uint256)
func (_BridgeBank *BridgeBankCallerSession) LockNonce() (*big.Int, error) {
	return _BridgeBank.Contract.LockNonce(&_BridgeBank.CallOpts)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_BridgeBank *BridgeBankCaller) Operator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "operator")
	return *ret0, err
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_BridgeBank *BridgeBankSession) Operator() (common.Address, error) {
	return _BridgeBank.Contract.Operator(&_BridgeBank.CallOpts)
}

// Operator is a free data retrieval call binding the contract method 0x570ca735.
//
// Solidity: function operator() view returns(address)
func (_BridgeBank *BridgeBankCallerSession) Operator() (common.Address, error) {
	return _BridgeBank.Contract.Operator(&_BridgeBank.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_BridgeBank *BridgeBankCaller) Oracle(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BridgeBank.contract.Call(opts, out, "oracle")
	return *ret0, err
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_BridgeBank *BridgeBankSession) Oracle() (common.Address, error) {
	return _BridgeBank.Contract.Oracle(&_BridgeBank.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_BridgeBank *BridgeBankCallerSession) Oracle() (common.Address, error) {
	return _BridgeBank.Contract.Oracle(&_BridgeBank.CallOpts)
}

// TokensData is a free data retrieval call binding the contract method 0xac66c6e0.
//
// Solidity: function tokensData(address ) view returns(uint256 lockedFund, address ethereumMappedToken, bool isActive)
func (_BridgeBank *BridgeBankCaller) TokensData(opts *bind.CallOpts, arg0 common.Address) (struct {
	LockedFund          *big.Int
	EthereumMappedToken common.Address
	IsActive            bool
}, error) {
	ret := new(struct {
		LockedFund          *big.Int
		EthereumMappedToken common.Address
		IsActive            bool
	})
	out := ret
	err := _BridgeBank.contract.Call(opts, out, "tokensData", arg0)
	return *ret, err
}

// TokensData is a free data retrieval call binding the contract method 0xac66c6e0.
//
// Solidity: function tokensData(address ) view returns(uint256 lockedFund, address ethereumMappedToken, bool isActive)
func (_BridgeBank *BridgeBankSession) TokensData(arg0 common.Address) (struct {
	LockedFund          *big.Int
	EthereumMappedToken common.Address
	IsActive            bool
}, error) {
	return _BridgeBank.Contract.TokensData(&_BridgeBank.CallOpts, arg0)
}

// TokensData is a free data retrieval call binding the contract method 0xac66c6e0.
//
// Solidity: function tokensData(address ) view returns(uint256 lockedFund, address ethereumMappedToken, bool isActive)
func (_BridgeBank *BridgeBankCallerSession) TokensData(arg0 common.Address) (struct {
	LockedFund          *big.Int
	EthereumMappedToken common.Address
	IsActive            bool
}, error) {
	return _BridgeBank.Contract.TokensData(&_BridgeBank.CallOpts, arg0)
}

// ActivateToken is a paid mutator transaction binding the contract method 0x0d1ce2d2.
//
// Solidity: function activateToken(address _harmonyToken) returns()
func (_BridgeBank *BridgeBankTransactor) ActivateToken(opts *bind.TransactOpts, _harmonyToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "activateToken", _harmonyToken)
}

// ActivateToken is a paid mutator transaction binding the contract method 0x0d1ce2d2.
//
// Solidity: function activateToken(address _harmonyToken) returns()
func (_BridgeBank *BridgeBankSession) ActivateToken(_harmonyToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.ActivateToken(&_BridgeBank.TransactOpts, _harmonyToken)
}

// ActivateToken is a paid mutator transaction binding the contract method 0x0d1ce2d2.
//
// Solidity: function activateToken(address _harmonyToken) returns()
func (_BridgeBank *BridgeBankTransactorSession) ActivateToken(_harmonyToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.ActivateToken(&_BridgeBank.TransactOpts, _harmonyToken)
}

// AddToken is a paid mutator transaction binding the contract method 0xa766a392.
//
// Solidity: function addToken(address _harmonyToken, uint256 _harmonyTokenAmount, address _ethereumToken) returns()
func (_BridgeBank *BridgeBankTransactor) AddToken(opts *bind.TransactOpts, _harmonyToken common.Address, _harmonyTokenAmount *big.Int, _ethereumToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "addToken", _harmonyToken, _harmonyTokenAmount, _ethereumToken)
}

// AddToken is a paid mutator transaction binding the contract method 0xa766a392.
//
// Solidity: function addToken(address _harmonyToken, uint256 _harmonyTokenAmount, address _ethereumToken) returns()
func (_BridgeBank *BridgeBankSession) AddToken(_harmonyToken common.Address, _harmonyTokenAmount *big.Int, _ethereumToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.AddToken(&_BridgeBank.TransactOpts, _harmonyToken, _harmonyTokenAmount, _ethereumToken)
}

// AddToken is a paid mutator transaction binding the contract method 0xa766a392.
//
// Solidity: function addToken(address _harmonyToken, uint256 _harmonyTokenAmount, address _ethereumToken) returns()
func (_BridgeBank *BridgeBankTransactorSession) AddToken(_harmonyToken common.Address, _harmonyTokenAmount *big.Int, _ethereumToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.AddToken(&_BridgeBank.TransactOpts, _harmonyToken, _harmonyTokenAmount, _ethereumToken)
}

// DeactivateToken is a paid mutator transaction binding the contract method 0x68173bcf.
//
// Solidity: function deactivateToken(address _harmonyToken) returns()
func (_BridgeBank *BridgeBankTransactor) DeactivateToken(opts *bind.TransactOpts, _harmonyToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "deactivateToken", _harmonyToken)
}

// DeactivateToken is a paid mutator transaction binding the contract method 0x68173bcf.
//
// Solidity: function deactivateToken(address _harmonyToken) returns()
func (_BridgeBank *BridgeBankSession) DeactivateToken(_harmonyToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.DeactivateToken(&_BridgeBank.TransactOpts, _harmonyToken)
}

// DeactivateToken is a paid mutator transaction binding the contract method 0x68173bcf.
//
// Solidity: function deactivateToken(address _harmonyToken) returns()
func (_BridgeBank *BridgeBankTransactorSession) DeactivateToken(_harmonyToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.DeactivateToken(&_BridgeBank.TransactOpts, _harmonyToken)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _bridgeRegistry, address _bandOracleAddress, address _ethereumONE) payable returns()
func (_BridgeBank *BridgeBankTransactor) Initialize(opts *bind.TransactOpts, _bridgeRegistry common.Address, _bandOracleAddress common.Address, _ethereumONE common.Address) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "initialize", _bridgeRegistry, _bandOracleAddress, _ethereumONE)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _bridgeRegistry, address _bandOracleAddress, address _ethereumONE) payable returns()
func (_BridgeBank *BridgeBankSession) Initialize(_bridgeRegistry common.Address, _bandOracleAddress common.Address, _ethereumONE common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.Initialize(&_BridgeBank.TransactOpts, _bridgeRegistry, _bandOracleAddress, _ethereumONE)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _bridgeRegistry, address _bandOracleAddress, address _ethereumONE) payable returns()
func (_BridgeBank *BridgeBankTransactorSession) Initialize(_bridgeRegistry common.Address, _bandOracleAddress common.Address, _ethereumONE common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.Initialize(&_BridgeBank.TransactOpts, _bridgeRegistry, _bandOracleAddress, _ethereumONE)
}

// SwapONEForETH is a paid mutator transaction binding the contract method 0xf81e9612.
//
// Solidity: function swapONEForETH(address _ethereumReceiver, uint256 _amountONE) payable returns()
func (_BridgeBank *BridgeBankTransactor) SwapONEForETH(opts *bind.TransactOpts, _ethereumReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "swapONEForETH", _ethereumReceiver, _amountONE)
}

// SwapONEForETH is a paid mutator transaction binding the contract method 0xf81e9612.
//
// Solidity: function swapONEForETH(address _ethereumReceiver, uint256 _amountONE) payable returns()
func (_BridgeBank *BridgeBankSession) SwapONEForETH(_ethereumReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapONEForETH(&_BridgeBank.TransactOpts, _ethereumReceiver, _amountONE)
}

// SwapONEForETH is a paid mutator transaction binding the contract method 0xf81e9612.
//
// Solidity: function swapONEForETH(address _ethereumReceiver, uint256 _amountONE) payable returns()
func (_BridgeBank *BridgeBankTransactorSession) SwapONEForETH(_ethereumReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapONEForETH(&_BridgeBank.TransactOpts, _ethereumReceiver, _amountONE)
}

// SwapONEForToken is a paid mutator transaction binding the contract method 0xd4df26d2.
//
// Solidity: function swapONEForToken(address _ethereumReceiver, uint256 _amountONE, address _destToken) payable returns()
func (_BridgeBank *BridgeBankTransactor) SwapONEForToken(opts *bind.TransactOpts, _ethereumReceiver common.Address, _amountONE *big.Int, _destToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "swapONEForToken", _ethereumReceiver, _amountONE, _destToken)
}

// SwapONEForToken is a paid mutator transaction binding the contract method 0xd4df26d2.
//
// Solidity: function swapONEForToken(address _ethereumReceiver, uint256 _amountONE, address _destToken) payable returns()
func (_BridgeBank *BridgeBankSession) SwapONEForToken(_ethereumReceiver common.Address, _amountONE *big.Int, _destToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapONEForToken(&_BridgeBank.TransactOpts, _ethereumReceiver, _amountONE, _destToken)
}

// SwapONEForToken is a paid mutator transaction binding the contract method 0xd4df26d2.
//
// Solidity: function swapONEForToken(address _ethereumReceiver, uint256 _amountONE, address _destToken) payable returns()
func (_BridgeBank *BridgeBankTransactorSession) SwapONEForToken(_ethereumReceiver common.Address, _amountONE *big.Int, _destToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapONEForToken(&_BridgeBank.TransactOpts, _ethereumReceiver, _amountONE, _destToken)
}

// SwapONEForWrappedONE is a paid mutator transaction binding the contract method 0x07e4150d.
//
// Solidity: function swapONEForWrappedONE(address _ethereumReceiver, uint256 _amountONE) payable returns()
func (_BridgeBank *BridgeBankTransactor) SwapONEForWrappedONE(opts *bind.TransactOpts, _ethereumReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "swapONEForWrappedONE", _ethereumReceiver, _amountONE)
}

// SwapONEForWrappedONE is a paid mutator transaction binding the contract method 0x07e4150d.
//
// Solidity: function swapONEForWrappedONE(address _ethereumReceiver, uint256 _amountONE) payable returns()
func (_BridgeBank *BridgeBankSession) SwapONEForWrappedONE(_ethereumReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapONEForWrappedONE(&_BridgeBank.TransactOpts, _ethereumReceiver, _amountONE)
}

// SwapONEForWrappedONE is a paid mutator transaction binding the contract method 0x07e4150d.
//
// Solidity: function swapONEForWrappedONE(address _ethereumReceiver, uint256 _amountONE) payable returns()
func (_BridgeBank *BridgeBankTransactorSession) SwapONEForWrappedONE(_ethereumReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapONEForWrappedONE(&_BridgeBank.TransactOpts, _ethereumReceiver, _amountONE)
}

// SwapTokenForETH is a paid mutator transaction binding the contract method 0x751c6305.
//
// Solidity: function swapTokenForETH(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankTransactor) SwapTokenForETH(opts *bind.TransactOpts, _ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "swapTokenForETH", _ethereumReceiver, _harmonyToken, _harmonyTokenAmount)
}

// SwapTokenForETH is a paid mutator transaction binding the contract method 0x751c6305.
//
// Solidity: function swapTokenForETH(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankSession) SwapTokenForETH(_ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapTokenForETH(&_BridgeBank.TransactOpts, _ethereumReceiver, _harmonyToken, _harmonyTokenAmount)
}

// SwapTokenForETH is a paid mutator transaction binding the contract method 0x751c6305.
//
// Solidity: function swapTokenForETH(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankTransactorSession) SwapTokenForETH(_ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapTokenForETH(&_BridgeBank.TransactOpts, _ethereumReceiver, _harmonyToken, _harmonyTokenAmount)
}

// SwapTokenForToken is a paid mutator transaction binding the contract method 0x9b92910c.
//
// Solidity: function swapTokenForToken(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount, address _destToken) returns()
func (_BridgeBank *BridgeBankTransactor) SwapTokenForToken(opts *bind.TransactOpts, _ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int, _destToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "swapTokenForToken", _ethereumReceiver, _harmonyToken, _harmonyTokenAmount, _destToken)
}

// SwapTokenForToken is a paid mutator transaction binding the contract method 0x9b92910c.
//
// Solidity: function swapTokenForToken(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount, address _destToken) returns()
func (_BridgeBank *BridgeBankSession) SwapTokenForToken(_ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int, _destToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapTokenForToken(&_BridgeBank.TransactOpts, _ethereumReceiver, _harmonyToken, _harmonyTokenAmount, _destToken)
}

// SwapTokenForToken is a paid mutator transaction binding the contract method 0x9b92910c.
//
// Solidity: function swapTokenForToken(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount, address _destToken) returns()
func (_BridgeBank *BridgeBankTransactorSession) SwapTokenForToken(_ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int, _destToken common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapTokenForToken(&_BridgeBank.TransactOpts, _ethereumReceiver, _harmonyToken, _harmonyTokenAmount, _destToken)
}

// SwapTokenForWONE is a paid mutator transaction binding the contract method 0xe42f414d.
//
// Solidity: function swapTokenForWONE(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankTransactor) SwapTokenForWONE(opts *bind.TransactOpts, _ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "swapTokenForWONE", _ethereumReceiver, _harmonyToken, _harmonyTokenAmount)
}

// SwapTokenForWONE is a paid mutator transaction binding the contract method 0xe42f414d.
//
// Solidity: function swapTokenForWONE(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankSession) SwapTokenForWONE(_ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapTokenForWONE(&_BridgeBank.TransactOpts, _ethereumReceiver, _harmonyToken, _harmonyTokenAmount)
}

// SwapTokenForWONE is a paid mutator transaction binding the contract method 0xe42f414d.
//
// Solidity: function swapTokenForWONE(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankTransactorSession) SwapTokenForWONE(_ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapTokenForWONE(&_BridgeBank.TransactOpts, _ethereumReceiver, _harmonyToken, _harmonyTokenAmount)
}

// SwapToken11 is a paid mutator transaction binding the contract method 0xbb0a64db.
//
// Solidity: function swapToken_1_1(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankTransactor) SwapToken11(opts *bind.TransactOpts, _ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "swapToken_1_1", _ethereumReceiver, _harmonyToken, _harmonyTokenAmount)
}

// SwapToken11 is a paid mutator transaction binding the contract method 0xbb0a64db.
//
// Solidity: function swapToken_1_1(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankSession) SwapToken11(_ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapToken11(&_BridgeBank.TransactOpts, _ethereumReceiver, _harmonyToken, _harmonyTokenAmount)
}

// SwapToken11 is a paid mutator transaction binding the contract method 0xbb0a64db.
//
// Solidity: function swapToken_1_1(address _ethereumReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankTransactorSession) SwapToken11(_ethereumReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.SwapToken11(&_BridgeBank.TransactOpts, _ethereumReceiver, _harmonyToken, _harmonyTokenAmount)
}

// UnlockERC20 is a paid mutator transaction binding the contract method 0x3c298e78.
//
// Solidity: function unlockERC20(address _harmonyReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankTransactor) UnlockERC20(opts *bind.TransactOpts, _harmonyReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "unlockERC20", _harmonyReceiver, _harmonyToken, _harmonyTokenAmount)
}

// UnlockERC20 is a paid mutator transaction binding the contract method 0x3c298e78.
//
// Solidity: function unlockERC20(address _harmonyReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankSession) UnlockERC20(_harmonyReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.UnlockERC20(&_BridgeBank.TransactOpts, _harmonyReceiver, _harmonyToken, _harmonyTokenAmount)
}

// UnlockERC20 is a paid mutator transaction binding the contract method 0x3c298e78.
//
// Solidity: function unlockERC20(address _harmonyReceiver, address _harmonyToken, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankTransactorSession) UnlockERC20(_harmonyReceiver common.Address, _harmonyToken common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.UnlockERC20(&_BridgeBank.TransactOpts, _harmonyReceiver, _harmonyToken, _harmonyTokenAmount)
}

// UnlockONE is a paid mutator transaction binding the contract method 0x67c2c018.
//
// Solidity: function unlockONE(address _harmonyReceiver, uint256 _amountONE) returns()
func (_BridgeBank *BridgeBankTransactor) UnlockONE(opts *bind.TransactOpts, _harmonyReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "unlockONE", _harmonyReceiver, _amountONE)
}

// UnlockONE is a paid mutator transaction binding the contract method 0x67c2c018.
//
// Solidity: function unlockONE(address _harmonyReceiver, uint256 _amountONE) returns()
func (_BridgeBank *BridgeBankSession) UnlockONE(_harmonyReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.UnlockONE(&_BridgeBank.TransactOpts, _harmonyReceiver, _amountONE)
}

// UnlockONE is a paid mutator transaction binding the contract method 0x67c2c018.
//
// Solidity: function unlockONE(address _harmonyReceiver, uint256 _amountONE) returns()
func (_BridgeBank *BridgeBankTransactorSession) UnlockONE(_harmonyReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.UnlockONE(&_BridgeBank.TransactOpts, _harmonyReceiver, _amountONE)
}

// UpdateFee is a paid mutator transaction binding the contract method 0x2740c197.
//
// Solidity: function updateFee(uint256 _feeNumerator, uint256 _feeDenominator) returns()
func (_BridgeBank *BridgeBankTransactor) UpdateFee(opts *bind.TransactOpts, _feeNumerator *big.Int, _feeDenominator *big.Int) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "updateFee", _feeNumerator, _feeDenominator)
}

// UpdateFee is a paid mutator transaction binding the contract method 0x2740c197.
//
// Solidity: function updateFee(uint256 _feeNumerator, uint256 _feeDenominator) returns()
func (_BridgeBank *BridgeBankSession) UpdateFee(_feeNumerator *big.Int, _feeDenominator *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.UpdateFee(&_BridgeBank.TransactOpts, _feeNumerator, _feeDenominator)
}

// UpdateFee is a paid mutator transaction binding the contract method 0x2740c197.
//
// Solidity: function updateFee(uint256 _feeNumerator, uint256 _feeDenominator) returns()
func (_BridgeBank *BridgeBankTransactorSession) UpdateFee(_feeNumerator *big.Int, _feeDenominator *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.UpdateFee(&_BridgeBank.TransactOpts, _feeNumerator, _feeDenominator)
}

// UpdateHmyBridge is a paid mutator transaction binding the contract method 0x17877820.
//
// Solidity: function updateHmyBridge(address _ethereumBridge) returns()
func (_BridgeBank *BridgeBankTransactor) UpdateHmyBridge(opts *bind.TransactOpts, _ethereumBridge common.Address) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "updateHmyBridge", _ethereumBridge)
}

// UpdateHmyBridge is a paid mutator transaction binding the contract method 0x17877820.
//
// Solidity: function updateHmyBridge(address _ethereumBridge) returns()
func (_BridgeBank *BridgeBankSession) UpdateHmyBridge(_ethereumBridge common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.UpdateHmyBridge(&_BridgeBank.TransactOpts, _ethereumBridge)
}

// UpdateHmyBridge is a paid mutator transaction binding the contract method 0x17877820.
//
// Solidity: function updateHmyBridge(address _ethereumBridge) returns()
func (_BridgeBank *BridgeBankTransactorSession) UpdateHmyBridge(_ethereumBridge common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.UpdateHmyBridge(&_BridgeBank.TransactOpts, _ethereumBridge)
}

// UpdateOracle is a paid mutator transaction binding the contract method 0x1cb44dfc.
//
// Solidity: function updateOracle(address _oracleAddress) returns()
func (_BridgeBank *BridgeBankTransactor) UpdateOracle(opts *bind.TransactOpts, _oracleAddress common.Address) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "updateOracle", _oracleAddress)
}

// UpdateOracle is a paid mutator transaction binding the contract method 0x1cb44dfc.
//
// Solidity: function updateOracle(address _oracleAddress) returns()
func (_BridgeBank *BridgeBankSession) UpdateOracle(_oracleAddress common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.UpdateOracle(&_BridgeBank.TransactOpts, _oracleAddress)
}

// UpdateOracle is a paid mutator transaction binding the contract method 0x1cb44dfc.
//
// Solidity: function updateOracle(address _oracleAddress) returns()
func (_BridgeBank *BridgeBankTransactorSession) UpdateOracle(_oracleAddress common.Address) (*types.Transaction, error) {
	return _BridgeBank.Contract.UpdateOracle(&_BridgeBank.TransactOpts, _oracleAddress)
}

// WithdrawERC20 is a paid mutator transaction binding the contract method 0x44004cc1.
//
// Solidity: function withdrawERC20(address _harmonyToken, address _harmonyReceiver, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankTransactor) WithdrawERC20(opts *bind.TransactOpts, _harmonyToken common.Address, _harmonyReceiver common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "withdrawERC20", _harmonyToken, _harmonyReceiver, _harmonyTokenAmount)
}

// WithdrawERC20 is a paid mutator transaction binding the contract method 0x44004cc1.
//
// Solidity: function withdrawERC20(address _harmonyToken, address _harmonyReceiver, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankSession) WithdrawERC20(_harmonyToken common.Address, _harmonyReceiver common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.WithdrawERC20(&_BridgeBank.TransactOpts, _harmonyToken, _harmonyReceiver, _harmonyTokenAmount)
}

// WithdrawERC20 is a paid mutator transaction binding the contract method 0x44004cc1.
//
// Solidity: function withdrawERC20(address _harmonyToken, address _harmonyReceiver, uint256 _harmonyTokenAmount) returns()
func (_BridgeBank *BridgeBankTransactorSession) WithdrawERC20(_harmonyToken common.Address, _harmonyReceiver common.Address, _harmonyTokenAmount *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.WithdrawERC20(&_BridgeBank.TransactOpts, _harmonyToken, _harmonyReceiver, _harmonyTokenAmount)
}

// WithdrawONE is a paid mutator transaction binding the contract method 0x6082072e.
//
// Solidity: function withdrawONE(address _harmonyReceiver, uint256 _amountONE) returns()
func (_BridgeBank *BridgeBankTransactor) WithdrawONE(opts *bind.TransactOpts, _harmonyReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.contract.Transact(opts, "withdrawONE", _harmonyReceiver, _amountONE)
}

// WithdrawONE is a paid mutator transaction binding the contract method 0x6082072e.
//
// Solidity: function withdrawONE(address _harmonyReceiver, uint256 _amountONE) returns()
func (_BridgeBank *BridgeBankSession) WithdrawONE(_harmonyReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.WithdrawONE(&_BridgeBank.TransactOpts, _harmonyReceiver, _amountONE)
}

// WithdrawONE is a paid mutator transaction binding the contract method 0x6082072e.
//
// Solidity: function withdrawONE(address _harmonyReceiver, uint256 _amountONE) returns()
func (_BridgeBank *BridgeBankTransactorSession) WithdrawONE(_harmonyReceiver common.Address, _amountONE *big.Int) (*types.Transaction, error) {
	return _BridgeBank.Contract.WithdrawONE(&_BridgeBank.TransactOpts, _harmonyReceiver, _amountONE)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BridgeBank *BridgeBankTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BridgeBank.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BridgeBank *BridgeBankSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BridgeBank.Contract.Fallback(&_BridgeBank.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BridgeBank *BridgeBankTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _BridgeBank.Contract.Fallback(&_BridgeBank.TransactOpts, calldata)
}

// BridgeBankHmyLogLockIterator is returned from FilterHmyLogLock and is used to iterate over the raw logs and unpacked data for HmyLogLock events raised by the BridgeBank contract.
type BridgeBankHmyLogLockIterator struct {
	Event *BridgeBankHmyLogLock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBankHmyLogLockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBankHmyLogLock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBankHmyLogLock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBankHmyLogLockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBankHmyLogLockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBankHmyLogLock represents a HmyLogLock event raised by the BridgeBank contract.
type BridgeBankHmyLogLock struct {
	HarmonySender       common.Address
	EthereumReceiver    common.Address
	HarmonyToken        common.Address
	EthereumToken       common.Address
	HarmonyTokenAmount  *big.Int
	EthereumTokenAmount *big.Int
	Nonce               *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterHmyLogLock is a free log retrieval operation binding the contract event 0xc96ea772bdbfc9c55742ebc9bbe0d28bec1e4c02866c510c17ea178f7424bd59.
//
// Solidity: event HmyLogLock(address _harmonySender, address _ethereumReceiver, address _harmonyToken, address _ethereumToken, uint256 _harmonyTokenAmount, uint256 _ethereumTokenAmount, uint256 _nonce)
func (_BridgeBank *BridgeBankFilterer) FilterHmyLogLock(opts *bind.FilterOpts) (*BridgeBankHmyLogLockIterator, error) {

	logs, sub, err := _BridgeBank.contract.FilterLogs(opts, "HmyLogLock")
	if err != nil {
		return nil, err
	}
	return &BridgeBankHmyLogLockIterator{contract: _BridgeBank.contract, event: "HmyLogLock", logs: logs, sub: sub}, nil
}

// WatchHmyLogLock is a free log subscription operation binding the contract event 0xc96ea772bdbfc9c55742ebc9bbe0d28bec1e4c02866c510c17ea178f7424bd59.
//
// Solidity: event HmyLogLock(address _harmonySender, address _ethereumReceiver, address _harmonyToken, address _ethereumToken, uint256 _harmonyTokenAmount, uint256 _ethereumTokenAmount, uint256 _nonce)
func (_BridgeBank *BridgeBankFilterer) WatchHmyLogLock(opts *bind.WatchOpts, sink chan<- *BridgeBankHmyLogLock) (event.Subscription, error) {

	logs, sub, err := _BridgeBank.contract.WatchLogs(opts, "HmyLogLock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBankHmyLogLock)
				if err := _BridgeBank.contract.UnpackLog(event, "HmyLogLock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHmyLogLock is a log parse operation binding the contract event 0xc96ea772bdbfc9c55742ebc9bbe0d28bec1e4c02866c510c17ea178f7424bd59.
//
// Solidity: event HmyLogLock(address _harmonySender, address _ethereumReceiver, address _harmonyToken, address _ethereumToken, uint256 _harmonyTokenAmount, uint256 _ethereumTokenAmount, uint256 _nonce)
func (_BridgeBank *BridgeBankFilterer) ParseHmyLogLock(log types.Log) (*BridgeBankHmyLogLock, error) {
	event := new(BridgeBankHmyLogLock)
	if err := _BridgeBank.contract.UnpackLog(event, "HmyLogLock", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeBankHmyLogUnlockIterator is returned from FilterHmyLogUnlock and is used to iterate over the raw logs and unpacked data for HmyLogUnlock events raised by the BridgeBank contract.
type BridgeBankHmyLogUnlockIterator struct {
	Event *BridgeBankHmyLogUnlock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBankHmyLogUnlockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBankHmyLogUnlock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBankHmyLogUnlock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBankHmyLogUnlockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBankHmyLogUnlockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBankHmyLogUnlock represents a HmyLogUnlock event raised by the BridgeBank contract.
type BridgeBankHmyLogUnlock struct {
	To    common.Address
	Token common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterHmyLogUnlock is a free log retrieval operation binding the contract event 0xffd748b3c62ce569a87c6f82cb83dcb53e4dbb2e51f13fb1106d62db46959e44.
//
// Solidity: event HmyLogUnlock(address _to, address _token, uint256 _value)
func (_BridgeBank *BridgeBankFilterer) FilterHmyLogUnlock(opts *bind.FilterOpts) (*BridgeBankHmyLogUnlockIterator, error) {

	logs, sub, err := _BridgeBank.contract.FilterLogs(opts, "HmyLogUnlock")
	if err != nil {
		return nil, err
	}
	return &BridgeBankHmyLogUnlockIterator{contract: _BridgeBank.contract, event: "HmyLogUnlock", logs: logs, sub: sub}, nil
}

// WatchHmyLogUnlock is a free log subscription operation binding the contract event 0xffd748b3c62ce569a87c6f82cb83dcb53e4dbb2e51f13fb1106d62db46959e44.
//
// Solidity: event HmyLogUnlock(address _to, address _token, uint256 _value)
func (_BridgeBank *BridgeBankFilterer) WatchHmyLogUnlock(opts *bind.WatchOpts, sink chan<- *BridgeBankHmyLogUnlock) (event.Subscription, error) {

	logs, sub, err := _BridgeBank.contract.WatchLogs(opts, "HmyLogUnlock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBankHmyLogUnlock)
				if err := _BridgeBank.contract.UnpackLog(event, "HmyLogUnlock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHmyLogUnlock is a log parse operation binding the contract event 0xffd748b3c62ce569a87c6f82cb83dcb53e4dbb2e51f13fb1106d62db46959e44.
//
// Solidity: event HmyLogUnlock(address _to, address _token, uint256 _value)
func (_BridgeBank *BridgeBankFilterer) ParseHmyLogUnlock(log types.Log) (*BridgeBankHmyLogUnlock, error) {
	event := new(BridgeBankHmyLogUnlock)
	if err := _BridgeBank.contract.UnpackLog(event, "HmyLogUnlock", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeBankHmyUpdateEthereumBridgeIterator is returned from FilterHmyUpdateEthereumBridge and is used to iterate over the raw logs and unpacked data for HmyUpdateEthereumBridge events raised by the BridgeBank contract.
type BridgeBankHmyUpdateEthereumBridgeIterator struct {
	Event *BridgeBankHmyUpdateEthereumBridge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBankHmyUpdateEthereumBridgeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBankHmyUpdateEthereumBridge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBankHmyUpdateEthereumBridge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBankHmyUpdateEthereumBridgeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBankHmyUpdateEthereumBridgeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBankHmyUpdateEthereumBridge represents a HmyUpdateEthereumBridge event raised by the BridgeBank contract.
type BridgeBankHmyUpdateEthereumBridge struct {
	NewEthereumBridge common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterHmyUpdateEthereumBridge is a free log retrieval operation binding the contract event 0xb343014bec486ed48f42e74b67d9208fc7bc2ae591844b81d33698e0460b1c65.
//
// Solidity: event HmyUpdateEthereumBridge(address _newEthereumBridge)
func (_BridgeBank *BridgeBankFilterer) FilterHmyUpdateEthereumBridge(opts *bind.FilterOpts) (*BridgeBankHmyUpdateEthereumBridgeIterator, error) {

	logs, sub, err := _BridgeBank.contract.FilterLogs(opts, "HmyUpdateEthereumBridge")
	if err != nil {
		return nil, err
	}
	return &BridgeBankHmyUpdateEthereumBridgeIterator{contract: _BridgeBank.contract, event: "HmyUpdateEthereumBridge", logs: logs, sub: sub}, nil
}

// WatchHmyUpdateEthereumBridge is a free log subscription operation binding the contract event 0xb343014bec486ed48f42e74b67d9208fc7bc2ae591844b81d33698e0460b1c65.
//
// Solidity: event HmyUpdateEthereumBridge(address _newEthereumBridge)
func (_BridgeBank *BridgeBankFilterer) WatchHmyUpdateEthereumBridge(opts *bind.WatchOpts, sink chan<- *BridgeBankHmyUpdateEthereumBridge) (event.Subscription, error) {

	logs, sub, err := _BridgeBank.contract.WatchLogs(opts, "HmyUpdateEthereumBridge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBankHmyUpdateEthereumBridge)
				if err := _BridgeBank.contract.UnpackLog(event, "HmyUpdateEthereumBridge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHmyUpdateEthereumBridge is a log parse operation binding the contract event 0xb343014bec486ed48f42e74b67d9208fc7bc2ae591844b81d33698e0460b1c65.
//
// Solidity: event HmyUpdateEthereumBridge(address _newEthereumBridge)
func (_BridgeBank *BridgeBankFilterer) ParseHmyUpdateEthereumBridge(log types.Log) (*BridgeBankHmyUpdateEthereumBridge, error) {
	event := new(BridgeBankHmyUpdateEthereumBridge)
	if err := _BridgeBank.contract.UnpackLog(event, "HmyUpdateEthereumBridge", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeBankHmyUpdateFeeIterator is returned from FilterHmyUpdateFee and is used to iterate over the raw logs and unpacked data for HmyUpdateFee events raised by the BridgeBank contract.
type BridgeBankHmyUpdateFeeIterator struct {
	Event *BridgeBankHmyUpdateFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBankHmyUpdateFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBankHmyUpdateFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBankHmyUpdateFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBankHmyUpdateFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBankHmyUpdateFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBankHmyUpdateFee represents a HmyUpdateFee event raised by the BridgeBank contract.
type BridgeBankHmyUpdateFee struct {
	FeeNumerator   *big.Int
	FeeDenominator *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterHmyUpdateFee is a free log retrieval operation binding the contract event 0xfbe5b658c60543110f4932eea0f384269457d9108d8e5eaef9e91454ed97ae46.
//
// Solidity: event HmyUpdateFee(uint256 _feeNumerator, uint256 _feeDenominator)
func (_BridgeBank *BridgeBankFilterer) FilterHmyUpdateFee(opts *bind.FilterOpts) (*BridgeBankHmyUpdateFeeIterator, error) {

	logs, sub, err := _BridgeBank.contract.FilterLogs(opts, "HmyUpdateFee")
	if err != nil {
		return nil, err
	}
	return &BridgeBankHmyUpdateFeeIterator{contract: _BridgeBank.contract, event: "HmyUpdateFee", logs: logs, sub: sub}, nil
}

// WatchHmyUpdateFee is a free log subscription operation binding the contract event 0xfbe5b658c60543110f4932eea0f384269457d9108d8e5eaef9e91454ed97ae46.
//
// Solidity: event HmyUpdateFee(uint256 _feeNumerator, uint256 _feeDenominator)
func (_BridgeBank *BridgeBankFilterer) WatchHmyUpdateFee(opts *bind.WatchOpts, sink chan<- *BridgeBankHmyUpdateFee) (event.Subscription, error) {

	logs, sub, err := _BridgeBank.contract.WatchLogs(opts, "HmyUpdateFee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBankHmyUpdateFee)
				if err := _BridgeBank.contract.UnpackLog(event, "HmyUpdateFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHmyUpdateFee is a log parse operation binding the contract event 0xfbe5b658c60543110f4932eea0f384269457d9108d8e5eaef9e91454ed97ae46.
//
// Solidity: event HmyUpdateFee(uint256 _feeNumerator, uint256 _feeDenominator)
func (_BridgeBank *BridgeBankFilterer) ParseHmyUpdateFee(log types.Log) (*BridgeBankHmyUpdateFee, error) {
	event := new(BridgeBankHmyUpdateFee)
	if err := _BridgeBank.contract.UnpackLog(event, "HmyUpdateFee", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeBankHmyUpdateOracleIterator is returned from FilterHmyUpdateOracle and is used to iterate over the raw logs and unpacked data for HmyUpdateOracle events raised by the BridgeBank contract.
type BridgeBankHmyUpdateOracleIterator struct {
	Event *BridgeBankHmyUpdateOracle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBankHmyUpdateOracleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBankHmyUpdateOracle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBankHmyUpdateOracle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBankHmyUpdateOracleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBankHmyUpdateOracleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBankHmyUpdateOracle represents a HmyUpdateOracle event raised by the BridgeBank contract.
type BridgeBankHmyUpdateOracle struct {
	NewOracle common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterHmyUpdateOracle is a free log retrieval operation binding the contract event 0xe372e39b96140e811083233ea9596a9ae64bbbd4da1b56bbb88a4257b5699ce5.
//
// Solidity: event HmyUpdateOracle(address _newOracle)
func (_BridgeBank *BridgeBankFilterer) FilterHmyUpdateOracle(opts *bind.FilterOpts) (*BridgeBankHmyUpdateOracleIterator, error) {

	logs, sub, err := _BridgeBank.contract.FilterLogs(opts, "HmyUpdateOracle")
	if err != nil {
		return nil, err
	}
	return &BridgeBankHmyUpdateOracleIterator{contract: _BridgeBank.contract, event: "HmyUpdateOracle", logs: logs, sub: sub}, nil
}

// WatchHmyUpdateOracle is a free log subscription operation binding the contract event 0xe372e39b96140e811083233ea9596a9ae64bbbd4da1b56bbb88a4257b5699ce5.
//
// Solidity: event HmyUpdateOracle(address _newOracle)
func (_BridgeBank *BridgeBankFilterer) WatchHmyUpdateOracle(opts *bind.WatchOpts, sink chan<- *BridgeBankHmyUpdateOracle) (event.Subscription, error) {

	logs, sub, err := _BridgeBank.contract.WatchLogs(opts, "HmyUpdateOracle")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBankHmyUpdateOracle)
				if err := _BridgeBank.contract.UnpackLog(event, "HmyUpdateOracle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHmyUpdateOracle is a log parse operation binding the contract event 0xe372e39b96140e811083233ea9596a9ae64bbbd4da1b56bbb88a4257b5699ce5.
//
// Solidity: event HmyUpdateOracle(address _newOracle)
func (_BridgeBank *BridgeBankFilterer) ParseHmyUpdateOracle(log types.Log) (*BridgeBankHmyUpdateOracle, error) {
	event := new(BridgeBankHmyUpdateOracle)
	if err := _BridgeBank.contract.UnpackLog(event, "HmyUpdateOracle", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeBankHmyWithdrawERC20Iterator is returned from FilterHmyWithdrawERC20 and is used to iterate over the raw logs and unpacked data for HmyWithdrawERC20 events raised by the BridgeBank contract.
type BridgeBankHmyWithdrawERC20Iterator struct {
	Event *BridgeBankHmyWithdrawERC20 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBankHmyWithdrawERC20Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBankHmyWithdrawERC20)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBankHmyWithdrawERC20)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBankHmyWithdrawERC20Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBankHmyWithdrawERC20Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBankHmyWithdrawERC20 represents a HmyWithdrawERC20 event raised by the BridgeBank contract.
type BridgeBankHmyWithdrawERC20 struct {
	Token    common.Address
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterHmyWithdrawERC20 is a free log retrieval operation binding the contract event 0x26b9b38193ee7b7b01e370d117debbbe92e599b5c4ccea69f5c550840cf9489e.
//
// Solidity: event HmyWithdrawERC20(address _token, address _receiver, uint256 _amount)
func (_BridgeBank *BridgeBankFilterer) FilterHmyWithdrawERC20(opts *bind.FilterOpts) (*BridgeBankHmyWithdrawERC20Iterator, error) {

	logs, sub, err := _BridgeBank.contract.FilterLogs(opts, "HmyWithdrawERC20")
	if err != nil {
		return nil, err
	}
	return &BridgeBankHmyWithdrawERC20Iterator{contract: _BridgeBank.contract, event: "HmyWithdrawERC20", logs: logs, sub: sub}, nil
}

// WatchHmyWithdrawERC20 is a free log subscription operation binding the contract event 0x26b9b38193ee7b7b01e370d117debbbe92e599b5c4ccea69f5c550840cf9489e.
//
// Solidity: event HmyWithdrawERC20(address _token, address _receiver, uint256 _amount)
func (_BridgeBank *BridgeBankFilterer) WatchHmyWithdrawERC20(opts *bind.WatchOpts, sink chan<- *BridgeBankHmyWithdrawERC20) (event.Subscription, error) {

	logs, sub, err := _BridgeBank.contract.WatchLogs(opts, "HmyWithdrawERC20")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBankHmyWithdrawERC20)
				if err := _BridgeBank.contract.UnpackLog(event, "HmyWithdrawERC20", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHmyWithdrawERC20 is a log parse operation binding the contract event 0x26b9b38193ee7b7b01e370d117debbbe92e599b5c4ccea69f5c550840cf9489e.
//
// Solidity: event HmyWithdrawERC20(address _token, address _receiver, uint256 _amount)
func (_BridgeBank *BridgeBankFilterer) ParseHmyWithdrawERC20(log types.Log) (*BridgeBankHmyWithdrawERC20, error) {
	event := new(BridgeBankHmyWithdrawERC20)
	if err := _BridgeBank.contract.UnpackLog(event, "HmyWithdrawERC20", log); err != nil {
		return nil, err
	}
	return event, nil
}

// BridgeBankHmyWithdrawONEIterator is returned from FilterHmyWithdrawONE and is used to iterate over the raw logs and unpacked data for HmyWithdrawONE events raised by the BridgeBank contract.
type BridgeBankHmyWithdrawONEIterator struct {
	Event *BridgeBankHmyWithdrawONE // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBankHmyWithdrawONEIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBankHmyWithdrawONE)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBankHmyWithdrawONE)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBankHmyWithdrawONEIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBankHmyWithdrawONEIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBankHmyWithdrawONE represents a HmyWithdrawONE event raised by the BridgeBank contract.
type BridgeBankHmyWithdrawONE struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterHmyWithdrawONE is a free log retrieval operation binding the contract event 0x9cf9fa8598d0bf4588ecc192076dcf6cb28a0e8c20715597ba0b057fd61bf20e.
//
// Solidity: event HmyWithdrawONE(address _receiver, uint256 _amount)
func (_BridgeBank *BridgeBankFilterer) FilterHmyWithdrawONE(opts *bind.FilterOpts) (*BridgeBankHmyWithdrawONEIterator, error) {

	logs, sub, err := _BridgeBank.contract.FilterLogs(opts, "HmyWithdrawONE")
	if err != nil {
		return nil, err
	}
	return &BridgeBankHmyWithdrawONEIterator{contract: _BridgeBank.contract, event: "HmyWithdrawONE", logs: logs, sub: sub}, nil
}

// WatchHmyWithdrawONE is a free log subscription operation binding the contract event 0x9cf9fa8598d0bf4588ecc192076dcf6cb28a0e8c20715597ba0b057fd61bf20e.
//
// Solidity: event HmyWithdrawONE(address _receiver, uint256 _amount)
func (_BridgeBank *BridgeBankFilterer) WatchHmyWithdrawONE(opts *bind.WatchOpts, sink chan<- *BridgeBankHmyWithdrawONE) (event.Subscription, error) {

	logs, sub, err := _BridgeBank.contract.WatchLogs(opts, "HmyWithdrawONE")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBankHmyWithdrawONE)
				if err := _BridgeBank.contract.UnpackLog(event, "HmyWithdrawONE", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHmyWithdrawONE is a log parse operation binding the contract event 0x9cf9fa8598d0bf4588ecc192076dcf6cb28a0e8c20715597ba0b057fd61bf20e.
//
// Solidity: event HmyWithdrawONE(address _receiver, uint256 _amount)
func (_BridgeBank *BridgeBankFilterer) ParseHmyWithdrawONE(log types.Log) (*BridgeBankHmyWithdrawONE, error) {
	event := new(BridgeBankHmyWithdrawONE)
	if err := _BridgeBank.contract.UnpackLog(event, "HmyWithdrawONE", log); err != nil {
		return nil, err
	}
	return event, nil
}
